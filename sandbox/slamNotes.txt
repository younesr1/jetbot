course: https://www.youtube.com/watch?v=wVsfCnyt5jA&t=691s

SLAM Types: 
    Probablistic SLAM: p(x,m|z,u) where {desired: {x: robot path, m: map}, given: {z: observations, u: controls/inputs}}

    Full SLAM: estimates entire path

    Online SLAM: Recovers only the most recent pose

    Volumetric SLAM: 3D representation of physical structure

    Monocular SLAM: Using only camera for SLAM

    Feature based SLAM: Attempts to represent distinct landmarks

Approach:
1. Detect and match features
    Find locators with goodFeaturestoTrack()
    From locators, determine descriptors with orb::compute(). ORB is a binary string descriptor.
    Use FLANN based matcher to match features across frames
2. Matcher
    Use FLANN based matcher to match features across frames
    Use the ratio test to filter bad matches :
        The distance ratio between the two nearest matches of a considered keypoint is computed and it is a good match
        when this value is below a threshold. Indeed, this ratio allows helping to discriminate between ambiguous
        matches (distance ratio between the two nearest neighbors is close to one) and well discriminated matches.
    Use RANSAC to further filter out bad matches: SKIPPED SINCE NO RANSAC ALGORITHM FOR CPP
        Outlier filtering algorithm, which takes in data, produces a model. Anything well described by the model is an
        inlier. Anything poorly described is an outlier. Accuracy is proportional to max iterations allowed
        for finding the model.
